package sinbad2.element.ui.handler.pdf.generate;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.ui.PlatformUI;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;

import sinbad2.element.alternative.Alternative;
import sinbad2.element.campaigns.Campaign;
import sinbad2.element.criterion.Criterion;
import sinbad2.element.mec.MEC;
import sinbad2.element.ui.view.mecs.jfreechart.MECChart;
import sinbad2.element.ui.wizard.GeneratePDFWizard;
import sinbad2.element.ui.wizard.SelectAlternativesWizardPage;
import sinbad2.element.ui.wizard.SelectCampaignsWizardPage;
import sinbad2.element.ui.wizard.SelectChartWizardPage;
import sinbad2.element.ui.wizard.SelectMEsWizardPage;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.LinkedList;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.Image;

public class GeneratePDFHandler extends AbstractHandler {

	private static Document _document;
	
	private static java.util.List<String> _chartsSelected;
	private static java.util.List<Campaign> _campaignsSelected;
	private static java.util.List<Alternative> _alternativesSelected;
	private static java.util.List<MEC> _mecsSelected;
	
	private static String FILE = "D:/Álvaro/Escritorio/DGT-Analysis/FirstPdf.pdf";
	private static String NAME_FILE = "/prueba.png";
	
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	@Override
	public Object execute(ExecutionEvent event) throws ExecutionException {
		WizardDialog dialog = new WizardDialog(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), new GeneratePDFWizard());
		dialog.open(); 
		
		_chartsSelected = SelectChartWizardPage.getInformationCharts();
		_campaignsSelected = SelectCampaignsWizardPage.getInformationCampaigns();
		_alternativesSelected = SelectAlternativesWizardPage.getInformationAlternatives();
		_mecsSelected = SelectMEsWizardPage.getInformationMECs();
		
		try {
			_document = new Document();
			PdfWriter.getInstance(_document, new FileOutputStream(FILE));
			_document.open();
			addMetaData();
			addTitlePage();
			addContent();
			_document.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	private static void addMetaData() {
		_document.addTitle("Decision-MEC Analysis");
		_document.addSubject("DGT Analysis Campaigns");
		_document.addKeywords("chart, campaign, context, mec");
		_document.addAuthor("DGT");
		_document.addCreator("DGT");
	}

	private static void addTitlePage() throws DocumentException {
		Paragraph preface = new Paragraph();
		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Decision-MEC Analysis", catFont));

		addEmptyLine(preface, 1);
		preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph("This document describes something which is very important ", smallBold));

		addEmptyLine(preface, 8);

		preface.add(new Paragraph("This document is a preliminary version of dgt analysis ;-).", redFont));

		_document.add(preface);
		_document.newPage();
	}

	private static void addContent() throws DocumentException {
		Anchor anchor = new Anchor("Data campaigns", catFont);
		anchor.setName("Data campaigns");

		// Second parameter is the number of the chapter
		Chapter catPart = new Chapter(new Paragraph(anchor), 1);

		for(Campaign campaign: _campaignsSelected) {
			Paragraph subPara = new Paragraph(campaign.getName(), subFont);
			Section subCatPart = catPart.addSection(subPara);
			addEmptyLine(subPara, 1);
			createTableCampaigns(subCatPart, campaign);
			createChartCampaigns(subCatPart, campaign);
			addEmptyLine(subPara, 1);
		}

		// now add all this to the document
		_document.add(catPart);

		// Next section
		anchor = new Anchor("Second Chapter", catFont);
		anchor.setName("Second Chapter");

		// Second parameter is the number of the chapter
		catPart = new Chapter(new Paragraph(anchor), 1);

		// now add all this to the document
		_document.add(catPart);

	}

	private static void createTableCampaigns(Section subCatPart, Campaign campaign) throws BadElementException {
		PdfPTable table = new PdfPTable(3);

		PdfPCell c1 = new PdfPCell(new Phrase("Criterion"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Alternative"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Value"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
		table.setHeaderRows(1);

		
		for(MEC mec: _mecsSelected) {
			java.util.List<Criterion> criteriaMEC = mec.getAvailableCriteria();
			for(Criterion criterion: criteriaMEC) {
				for(Alternative alternative: _alternativesSelected) {
					table.addCell(criterion.getId());
					table.addCell(alternative.getId());
					if(campaign.getValue(criterion, alternative) != 0) {
						table.addCell(Double.toString(campaign.getValue(criterion, alternative)));
					} else {
						table.addCell(Double.toString(campaign.getAcumValue(criterion, alternative, _alternativesSelected)));
					}
				}
			}
		}

		subCatPart.add(table);

	}
	
	private static void createChartCampaigns(Section subCatPart, Campaign campaign) throws BadElementException {
		MECChart chart = new MECChart();
		
		java.util.List<Campaign> campaigns = new LinkedList<Campaign>();
		campaigns.add(campaign);
		chart.createChartByPDF(campaigns, _mecsSelected.get(0), 0, "combine", _alternativesSelected);
		JFreeChart barChart = chart.getBarChart();
		
		File file = new File(System.getProperty("user.home") + NAME_FILE);
		try {
			ChartUtilities.saveChartAsPNG(file, barChart, 500, 180);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		Image pdfImage;
		try {
			pdfImage = com.itextpdf.text.Image.getInstance(System.getProperty("user.home") + NAME_FILE);
			subCatPart.add(pdfImage);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

}
